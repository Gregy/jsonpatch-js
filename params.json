{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"jsonpatch-js","body":"# JSON Patch for JavaScript\r\n\r\nLibrary to apply JSON Patches in JavaScript\r\nhttp://tools.ietf.org/html/draft-ietf-appsawg-json-patch-08\r\n\r\njsonpatch.js works as in the browser as a script, as a Node module and as an\r\nAMD module.\r\n\r\n## Install\r\n\r\n**Bower**\r\n\r\n```\r\nbower install json-patch\r\n```\r\n\r\n**NPM**\r\n\r\n```\r\nnpm install json-patch\r\n```\r\n\r\n**Note: at this time, all operations are applied in-place.**\r\n\r\n## Methods\r\n\r\n**`jsonpatch.apply(document, patch)`**\r\n\r\nApplies a patch to the document\r\n\r\n**`jsonpatch.compile(patch)`**\r\n\r\nCompiles a patch and returns a function that takes a document to apply the patch to.\r\n\r\n## Patch Operations\r\n\r\n### Add\r\n\r\nPatch syntax: `{op: 'add', path: <path>, value: <value>}`\r\n\r\n```javascript\r\n// Add property, result: {foo: 'bar'}\r\njsonpatch.apply({}, [{op: 'add', path: '/foo', value: 'bar'}]);\r\n\r\n// Add array element, result: {foo: [1, 2, 3]}\r\njsonpatch.apply({foo: [1, 3]}, [{op: 'add', path: '/foo/1', value: 2}]);\r\n\r\n// Complex, result: {foo: [{bar: 'baz'}]}\r\njsonpatch.apply({foo: [{}]}, [{op: 'add', path: '/foo/0/bar', value: 'baz'}]);\r\n```\r\n\r\n### Remove\r\n\r\nPatch syntax: `{op: 'remove', path: <path>}`\r\n\r\n```javascript\r\n// Remove property, result: {}\r\njsonpatch.apply({foo: 'bar'}, [{op: 'remove', path: '/foo'}]);\r\n\r\n// Remove array element, result: {foo: [1, 3]}\r\njsonpatch.apply({foo: [1, 2, 3]}, [{op: 'remove', path: '/foo/1'}]);\r\n\r\n// Complex, result: {foo: [{}]}\r\njsonpatch.apply({foo: [{bar: 'baz'}]}, [{op: 'remove', path: '/foo/0/bar'}]);\r\n```\r\n\r\n### Replace\r\n\r\nPatch syntax: `{op: 'replace', path: <path>, value: <value>}`\r\n\r\n```javascript\r\n// Replace property, result: {foo: 1}\r\njsonpatch.apply({foo: 'bar'}, [{op: 'replace', path: '/foo', value: 1}]);\r\n\r\n// Repalce array element, result: {foo: [1, 4, 3]}\r\njsonpatch.apply({foo: [1, 2, 3]}, [{op: 'replace', path: '/foo/1', value: 4}]);\r\n\r\n// Complex, result: {foo: [{bar: 1}]}\r\njsonpatch.apply({foo: [{bar: 'baz'}]}, [{op: 'replace', path: '/foo/0/bar', value: 1}]);\r\n```\r\n\r\n### Move\r\n\r\nPatch syntax: `{op: 'move', from: <path>, path: <path>}`\r\n\r\n```javascript\r\n// Move property, result {bar: [1, 2, 3]}\r\njsonpatch.apply({foo: [1, 2, 3]}, [{op: 'move', from: '/foo', path: '/bar'}]);\r\n```\r\n\r\n### Copy\r\n\r\nPatch syntax: `{op: 'copy', from: <path>, path: <path>}`\r\n\r\n```javascript\r\n// Copy property, result {foo: [1, 2, 3], bar: 2}\r\njsonpatch.apply({foo: [1, 2, 3]}, [{op: 'copy', from: '/foo/1', path: '/bar'}]);\r\n```\r\n\r\n### Test\r\n\r\nPatch syntax: `{op: 'test', path: <path>, value: <value>}`\r\n\r\n```javascript\r\n// Test equality of property to value, result: true\r\njsonpatch.apply({foo: 'bar'}, [{op: 'test', path: '/foo', value: 'bar'}]\r\n```\r\n\r\n## Error Types\r\n\r\n**`JSONPatchError`**\r\n\r\nBase error type which all patch errors extend from.\r\n\r\n**`InvalidPointerError`**\r\n\r\nThrown when the pointer is invalid.\r\n\r\n**`InvalidPatchError`**\r\n\r\nThrown when the patch itself has an invalid syntax.\r\n\r\n**`PatchConflictError`**\r\n\r\nThrown when there is a conflic with applying the patch to the document.","tagline":"A JavaScript implementation of the JSON Media Type for partial modifications"}